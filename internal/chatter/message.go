package chatter

import (
	"fmt"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"go.uber.org/zap"

	"github.com/ksusonic/gogpt/internal/models"
)

func (c *Chatter) HandleMessage(message *tgbotapi.Message) error {
	if message.IsCommand() {
		switch message.Command() {
		case "start":
			_, _ = c.bot.Send(tgbotapi.NewMessage(
				message.Chat.ID,
				"üëã –ü—Ä–∏–≤–µ—Ç! –í—Å–µ, —á—Ç–æ —Ç—ã –¥–∞–ª–µ–µ –ø–∏—à–µ—à—å –º–Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ –º–æ–¥–µ–ª—å YandexART, —Ç–∞–∫ —á—Ç–æ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–π –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ üôå",
			))
		case "art":
			prompt := message.CommandArguments()
			if prompt == "" {
				_, _ = c.bot.Send(tgbotapi.NewMessage(
					message.Chat.ID,
					"–ù–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /art —Å–∏–Ω–∏–π –∫–∏—Ç",
				))
				return nil
			}

			return c.handleArtRequest(message, prompt)
		default:
			_, _ = c.bot.Send(tgbotapi.NewMessage(
				message.Chat.ID,
				"ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
			))
		}

		return nil
	}

	if message.Text != "" {
		return c.handleArtRequest(message, message.Text)
	}

	return nil
}

func (c *Chatter) handleArtRequest(message *tgbotapi.Message, prompt string) error {
	c.log.Info(
		prompt,
		zap.String("username", message.From.UserName),
		zap.Int64("user_id", message.From.ID),
		zap.Int64("chat_id", message.Chat.ID),
	)

	var queuePrompt string
	if len(c.artGenerateChan) > 0 {
		queuePrompt = fmt.Sprintf("–í—ã %d –≤ –æ—á–µ—Ä–µ–¥–∏", len(c.artGenerateChan)+1)
	}

	_, err := c.bot.Send(tgbotapi.NewMessage(
		message.Chat.ID,
		fmt.Sprintf("‚≠êÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ YandexART. %s", queuePrompt),
	))
	if err != nil {
		return err
	}

	c.artGenerateChan <- models.YaARTRequest{
		UserName:  message.From.UserName,
		Prompt:    prompt,
		ChatID:    message.Chat.ID,
		MessageID: message.MessageID,
	}

	return nil
}
